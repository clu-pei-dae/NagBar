//
//  FilterItems.swift
//  NagBar
//
//  Created by Volen Davidov on 24.01.16.
//  Copyright Â© 2016 Volen Davidov. All rights reserved.
//

import Foundation
import RealmSwift

class FilterItems {
    
    typealias FIDictionary = Dictionary<String, FilterItem>
    
    let realm = try! Realm()
    
    func getAll() -> FIDictionary {
        var filterItems: FIDictionary = [:]
        for filterItem in realm.objects(FilterItem.self) {
            filterItems[FilterItems.generateKey(filterItem.host, service: filterItem.service)] = filterItem
        }
        return filterItems
    }
    
    func count() -> Int {
        return self.getAll().count
    }
    
    func getByKey(_ key: String) -> FilterItem? {
        return getAll()[key]
    }
    
    private func getKeyById(_ id: Int) -> String {
        return getAll().keys.sorted(){$0.lowercased() < $1.lowercased()}[id]
    }
    
    func getById(_ id: Int) -> FilterItem {
        let key = self.getKeyById(id)
        let result = getAll()[key]
        return result!
    }
    
    func getKeys() -> Array<String> {
        return getAll().keys.sorted()
    }
    
    func updateStatus(filterItem: FilterItem, status: Int) {
        try! realm.write {
            filterItem.status = status
        }
    }
    
    func insert(key: String, value: FilterItem) {
        try! realm.write {
            realm.add(value)
        }
    }
    
    func removeById(_ id: Int) {
        var all = getAll()
        let key = getKeyById(id)
        
        try! realm.write {
            realm.delete(all[key]!)
        }
    }
    
    func removeByKey(_ key: String) {
        var all = getAll()
        
        try! realm.write {
            realm.delete(all[key]!)
        }
    }
    
    // the key for FilterItem is generated by concatenation of host and service
    class func generateKey(_ host: String, service: String) -> String {
        return host + service
    }
}
